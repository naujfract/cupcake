<?php
use Drupal\Core\Language\Language;
use Drupal\Core\Cache\CacheBackendInterface;


/**
 * Menu argument loader: Loads a Demo type by string.
 *
 * @param $name
 *   The machine name of a Demo type to load.
 *
 * @return \Drupal\demo\Entity\DemoTypeInterface
 *   A Demo type object or NULL if $name does not exist.
 */
function demo_type_load($name) {
  return entity_load('demo_type', $name);
}


/**
 * Loads a Demo entity from the database.
 *
 * @param int $id
 *   The Demo entity ID.
 * @param bool $reset
 *   (optional) Whether to reset the static cache. Defaults to
 *   FALSE.
 *
 * @return \Drupal\demo\Entity\DemoInterface|null
 *   A fully-populated Demo entity, or NULL if the entity is not found.
 */
function demo_load($id, $reset = FALSE) {
  return entity_load('demo', $id, $reset);
}


/**
 * Implements hook_entity_bundle_info().
 */
function demo_entity_bundle_info() {
  $bundles = array();
  // Bundles must provide a human readable name so we can create help and error
  // messages.
  foreach (demo_type_get_names() as $id => $label) {
    $bundles['demo'][$id]['label'] = $label;
  }
  return $bundles;
}


/**
 * Returns a list of available Demo type names.
 *
 * This list can include types that are queued for addition or deletion.
 *
 * @return array
 *   An array of Demo type labels, keyed by the Demo type name.
 */
function demo_type_get_names() {
  $cid = 'demo_type:names:' . language(Language::TYPE_INTERFACE)->id; // this name is completly custom
  if ($cache = cache()->get($cid)) {
    return $cache->data;
  }
  // Not using demo_type_get_types() or entity_load_multiple() here, to allow
  // this function being used in hook_entity_info() implementations.
  // @todo Consider to convert this into a generic config entity helper.
  $config_names = config_get_storage_names_with_prefix('demo.type.'); // the 'demo.type' is defined in Demo entiy definition
  $names = array();
  foreach ($config_names as $config_name) {
    $config = \Drupal::config($config_name);
    $names[$config->get('type')] = $config->get('name');
  }
  cache()->set($cid, $names, CacheBackendInterface::CACHE_PERMANENT, array(
    'demo_type' => array_keys($names),
    'demo_types' => TRUE,
  ));
  return $names;
}


/**
 * Returns a list of all the available demo types.
 *
 * This list can include types that are queued for addition or deletion.
 *
 * @return array
 *   An array of Demo type entities, keyed by ID.
 *
 * @see demo_type_load()
 */
function demo_type_get_types() {
  return entity_load_multiple('demo_type');
}
?>